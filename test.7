#!/bin/bash
#
# students must NOT change this file in any way!!!
PATH=/bin:/usr/bin
TEST=$0

# this is the input lines to use
cat > $0.input << 'END'
echo STARTING

echo "Variable test 2"

t1="of"
t2="you need"
t3="support"
t4="expansions"
wow="$t1 course $t2 to $t3 multiple ${t4}!!!!!"
echo $wow

EXP=expansion
test4="this is a test of >${EXP}< "
echo $test4

echo "Make sure these are all going in the environment, too!"
printenv test4

echo "Handling assignments with quotes is hard"
echo "You must, however, make these work"
test2="this is a test"
echo $test2
test3='this is another test'
echo $test3

echo "Wow, I can do math too!"
num_1=x
num_2="${num_1}${num_1}"
num_4="${num_2}${num_2}"
num_8="${num_4}${num_4}"
num_16="${num_8}${num_8}"
num_32="${num_16}${num_16}"
echo "2 plus 2 is ${num_2}${num_2}"
echo "2 plus 8 is ${num_2}${num_8}"
echo "16 times 3 is ${num_16}${num_16}${num_16}"

echo "This is also legal"
VAR=test
SIMPLE=$VAR
echo "SIMPLE is '${VAR}'"

echo "Variable names STOP when you reach illegal characters"
EXP="!"
echo "$EXP $EXP: $EXP- $EXP+"

END

# this is the correct output
# this is the output they should create
cat > $TEST.correct << 'END'
Variable test 2
of course you need to support multiple expansions!!!!!
this is a test of >expansion< 
Make sure these are all going in the environment, too!
this is a test of >expansion< 
Handling assignments with quotes is hard
You must, however, make these work
this is a test
this is another test
Wow, I can do math too!
2 plus 2 is xxxx
2 plus 8 is xxxxxxxxxx
16 times 3 is xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
This is also legal
SIMPLE is 'test'
Variable names STOP when you reach illegal characters
! !: !- !+
END

# don't change anything else
echo "export PS1=''; ./bash < $0.input; exit" | script -q > /dev/null 2>&1
sed 's/\r//g' typescript | grep STARTING -A 100000 | grep -v STARTING | awk '/exit/{exit} {print}' | grep  -v '^Script done' | egrep -v '^$' > $TEST.myoutput


if cmp -s $TEST.correct $TEST.myoutput; then
    echo "PASSES"; exit 0
else
    echo "FAILS"; 
    echo '==== output differences: < means the CORRECT output, > means YOUR output'
    diff $TEST.correct $TEST.myoutput
    exit 99
fi
